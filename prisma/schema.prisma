// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://neondb_owner:npg_ELj4xgYVTnr7@ep-twilight-fog-a1x0wp2e-pooler.ap-southeast-1.aws.neon.tech/neondb?sslmode=require"
}

model User {
  id               String   @id @default(uuid())
  email            String   @unique
  name             String
  passwordHash     String
  role             Role     @default(CREATOR)
  StripeCustomerId String?  @unique
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt

  profile         UserProfile?
  contents        Content[]
  courses         Course[]
  subscriptions   Subscription[]
  payments        Payment[]
  reviews         Review[]
  notifications   Notification[]
  sentMessages    Message[]    @relation("MessageSender")
  receivedMessages Message[]   @relation("MessageReceiver")
}

model UserProfile {
  id        String   @id @default(uuid())
  bio       String?
  avatarUrl String?
  wesite    String?
  twitter   String?
  instagram String?
  youtube   String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user   User   @relation(fields: [userId], references: [id])
  userId String @unique
}

model Content {
  id          String        @id @default(uuid())
  title       String
  description String?
  type        ContentType
  url         String
  status      ContentStatus @default(DRAFT)
  price       Float?        @default(0)
  language    String?
  tags        String?       // JSON string of tags
  demoLink    String?
  notes       String?
  metadata    String?       // JSON string for additional metadata
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  author           User               @relation(fields: [authorId], references: [id])
  authorId         String
  course           Course?            @relation(fields: [courseId], references: [id])
  courseId         String?
  Category         Category?          @relation(fields: [categoryId], references: [id])
  categoryId       String?
  Tag              Tag?               @relation(fields: [tagId], references: [id])
  tagId            String?
  ContentAnalytics ContentAnalytics[]
}

model Course {
  id          String   @id @default(uuid())
  title       String
  description String
  price       Float
  duration    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  salesCount  Int      @default(0)
  imgURL      String
  rating      Float

  author   User      @relation(fields: [authorId], references: [id])
  authorId String
  contents Content[]
  lessons  Lesson[]
  reviews  Review[]
  messages Message[]
}

model Lesson {
  id          String   @id @default(uuid())
  title       String
  description String
  order       Int
  contenturl  String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  course   Course @relation(fields: [courseId], references: [id])
  courseId String
}

model Subscription {
  id        String             @id @default(uuid())
  status    SubscriptionStatus
  startdate DateTime
  endDate   DateTime?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt

  user     User      @relation(fields: [userId], references: [id])
  userId   String
  payments Payment[]
}

model Payment {
  id               String        @id @default(uuid())
  amount           Float
  currency         String        @default("INR")
  status           PaymentStatus
  paymentvia       String
  paymentId        String
  razorpayOrderId  String?
  creatorId        String?
  originalAmount   Float?
  originalCurrency String?
  convertedAmount  Float?
  createdAt        DateTime      @default(now())
  subscription     Subscription  @relation(fields: [subscriptionId], references: [id])
  subscriptionId   String
  user             User          @relation(fields: [userId], references: [id])
  userId           String
  creator          Creator?      @relation(fields: [creatorId], references: [id])
}

model Review {
  id        String   @id @default(uuid())
  rating    Int
  comment   String?
  createdAt DateTime @default(now())

  user     User   @relation(fields: [userId], references: [id])
  userId   String
  course   Course @relation(fields: [courseId], references: [id])
  courseId String
}

model Category {
  id       String    @id @default(uuid())
  name     String    @unique
  contents Content[]
}

model Tag {
  id       String    @id @default(uuid())
  name     String    @unique
  contents Content[]
}

model ContentAnalytics {
  id         String    @id @default(uuid())
  views      Int       @default(0)
  likes      Int       @default(0)
  shares     Int       @default(0)
  lastviewed DateTime?

  content   Content @relation(fields: [contentId], references: [id])
  contentId String
}

model Notification {
  id        String           @id @default(uuid())
  type      NotificationType
  message   String
  read      Boolean          @default(false)
  createdAt DateTime         @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String
}

model Message {
  id        String      @id @default(uuid())
  subject   String
  content   String
  type      MessageType @default(GENERAL)
  isRead    Boolean     @default(false)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt

  // Sender (fan/student)
  sender   User   @relation("MessageSender", fields: [senderId], references: [id])
  senderId String

  // Receiver (creator)
  receiver   User   @relation("MessageReceiver", fields: [receiverId], references: [id])
  receiverId String

  course   Course? @relation(fields: [courseId], references: [id])
  courseId String?
}

model Creator {
  id            String   @id @default(uuid())
  name          String
  email         String   @unique
  bankAccount   String
  ifsc          String
  upi           String?
  createdAt     DateTime @default(now())
  payments      Payment[]
}

enum Role {
  ADMIN
  CREATOR
  CONSUMER
}

enum ContentType {
  VIDEO
  ARTICLE
  PODCAST
  COURSE
  TEMPLATE
  SOFTWARE
  EBOOK
  AUDIO
  IMAGE
  OTHER
}

enum ContentStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

enum SubscriptionStatus {
  ACTIVE
  CANCELLED
  PAUSED
  EXPIRED
}

enum PaymentStatus {
  SUCCEEDED
  PENDING
  FAILED
  REFUNDED
}

enum NotificationType {
  SYSTEM
  PAYMENT
  CONTENT
  SUBSCRIPTION
}

enum MessageType {
  QUESTION
  FEEDBACK
  SUPPORT
  GENERAL
}
